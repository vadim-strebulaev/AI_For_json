import numpy as np
from keras.models import Sequential
from keras.layers import Embedding, GRU, Dense
from keras.utils import to_categorical
input_texts = [
    "мне нужен сайт с функцией поиска и фильтрации",
    "нужен сайт для онлайн-обучения с видеолекциями и тестами",
    "я хочу портал новостей с разделами по категориям",
    "нужен сайт для бронирования отелей и авиабилетов",
    "мне нужен сайт с каталогом рецептов и возможностью добавления отзывов",
    "хочу сайт с калькулятором и формой обратной связи",
    "нужен сайт с возможностью загрузки и скачивания файлов",
    "я хочу личный блог с авторскими статьями",
    "нужен сайт для онлайн-магазина с оплатой картой и корзиной",
    "мне нужен форум для обсуждения спортивных тем",
    "хочу сайт с расписанием мероприятий и онлайн-бронированием",
    "нужен сайт для фотостудии с галереей и онлайн-записью",
    "я хочу портфолио с примерами своих работ",
    "нужен сайт для агентства недвижимости с поиском объектов и контактной формой",
    "мне нужен сайт с рейтингами и отзывами о фильмах",
    "хочу сайт для онлайн-игр с возможностью регистрации и соревнований",
    "нужен сайт для ресторана с меню и онлайн-заказом",
    "я хочу блог о путешествиях с фотографиями и историями",
    "нужен сайт с каталогом автомобилей и формой запроса на тест-драйв",
    "мне нужен сайт с информацией о медицинских услугах и онлайн-записью",
    "нужен сайт для заказа и доставки еды",
    "мне нужен сайт с подпиской на новостную рассылку",
    "я хочу онлайн-сервис для создания и отправки электронных открыток",
    "нужен сайт для бронирования билетов на концерты и мероприятия",
    "мне нужен сайт с каталогом товаров и возможностью сравнения цен",
    "хочу блог о здоровом образе жизни с советами и рецептами",
    "нужен сайт для создания и продажи персонализированных подарков",
    "я хочу форум для обсуждения технических вопросов",
    "нужен сайт с онлайн-калькулятором стоимости услуг",
    "мне нужен сайт с информацией о мероприятиях в моем городе",
    "хочу сайт для онлайн-курсов и обучающих материалов",
    "нужен сайт для поиска работы и размещения резюме",
    "я хочу портал для публикации научных статей",
    "нужен сайт с информацией о погоде и прогнозами",
    "мне нужен сайт для бронирования и аренды автомобилей",
    "хочу онлайн-магазин с продажей одежды и аксессуаров",
    "нужен сайт для заказа услуг ремонта и строительства",
    "я хочу блог о моде и стиле",
    "нужен сайт для создания и печати визиток",
    "мне нужен сайт с онлайн-трансляцией спортивных событий",
]
output_texts = [
    ["Поиск", "Фильтрация"],
    ["Онлайн-обучение", "Видеолекции", "Тесты"],
    ["Портал новостей", "Категории"],
    ["Бронирование", "Отели", "Авиабилеты"],
    ["Каталог рецептов", "Отзывы"],
    ["Калькулятор", "Обратная связь"],
    ["Загрузка файлов", "Скачивание файлов"],
    ["Личный блог", "Авторские статьи"],
    ["Онлайн-магазин", "Оплата картой", "Корзина"],
    ["Форум", "Спорт"],
    ["Расписание мероприятий", "Онлайн-бронирование"],
    ["Фотостудия", "Галерея", "Онлайн-запись"],
    ["Портфолио", "Примеры работ"],
    ["Агентство недвижимости", "Поиск объектов", "Контактная форма"],
    ["Рейтинги фильмов", "Отзывы"],
    ["Онлайн-игры", "Регистрация", "Соревнования"],
    ["Ресторан", "Меню", "Онлайн-заказ"],
    ["Путешествия", "Блог", "Фотографии", "Истории"],
    ["Каталог автомобилей", "Тест-драйв"],
    ["Медицинские услуги", "Онлайн-запись"],
    ["Заказ еды", "Доставка еды"],
    ["Подписка на рассылку", "Новости"],
    ["Открытки", "Электронные открытки"],
    ["Бронирование билетов", "Концерты", "Мероприятия"],
    ["Каталог товаров", "Сравнение цен"],
    ["Здоровый образ жизни", "Советы", "Рецепты"],
    ["Персонализированные подарки", "Продажа подарков"],
    ["Форум", "Технические вопросы"],
    ["Онлайн-калькулятор", "Стоимость услуг"],
    ["Информация о мероприятиях", "Городские события"],
    ["Онлайн-курсы", "Обучающие материалы"],
    ["Поиск работы", "Размещение резюме"],
    ["Научные статьи", "Публикация статей"],
    ["Информация о погоде", "Прогноз погоды"],
    ["Бронирование автомобилей", "Аренда автомобилей"],
    ["Онлайн-магазин одежды", "Продажа аксессуаров"],
    ["Услуги ремонта", "Услуги строительства"],
    ["Блог о моде", "Стиль"],
    ["Создание визиток", "Печать визиток"],
    ["Онлайн-трансляция спорта", "Спортивные события"],    
]

chars = sorted(list(set("".join(input_texts).lower())))
num_chars = len(chars)

char_to_index = {char: index for index, char in enumerate(chars)}
index_to_char = {index: char for index, char in enumerate(chars)}

max_sequence_length = max(len(text.split()) for text in input_texts)

input_sequences = []
target_sequences = []
for input_text, output_text in zip(input_texts, output_texts):
    input_sequence = np.zeros((1, max_sequence_length), dtype=np.int32)
    target_sequence = np.zeros((1, max_sequence_length), dtype=np.int32)

    words = input_text.lower().split()
    for t, word in enumerate(words):
        for i, char in enumerate(word):
            input_sequence[0, t] = char_to_index[char]
            if t > 0:
                target_sequence[0, t] = 1

    input_sequences.append(input_sequence)
    target_sequences.append(target_sequence)

input_sequences = np.concatenate(input_sequences, axis=0)
target_sequences = np.concatenate(target_sequences, axis=0)

latent_dim = 128
model = Sequential()
model.add(Embedding(num_chars, latent_dim, input_length=max_sequence_length))
model.add(GRU(256, return_sequences=True))
model.add(Dense(2, activation='softmax'))

model.compile(optimizer='adam', loss='binary_crossentropy')

model.fit(input_sequences, to_categorical(target_sequences, num_classes=2), batch_size=1, epochs=64)

while True:
    input_text = input()
    input_sequence = np.zeros((1, max_sequence_length), dtype=np.int32)
    words = input_text.lower().split()
    for t, word in enumerate(words):
        for i, char in enumerate(word):
            if char in char_to_index:
                input_sequence[0, t] = char_to_index[char]

    output_sequence = model.predict(input_sequence)
    output_text = ""    
    for t in range(max_sequence_length):
        if np.any(output_sequence[0, t] > 0.5):
            output_text += output_texts[0][t] + " "

    print(output_text)
